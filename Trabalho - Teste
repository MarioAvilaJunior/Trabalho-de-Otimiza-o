#include <iostream>
#include <vector>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <unistd.h>
#include <windows.h>
#include <time.h>
#include <algorithm>

int main()
{
    FILE *arquivo;
    char linha[256], *pch;
    unsigned int i, j, k, numero_vertices, numero_arestas, inteiro, vertice_aleatorio_um, vertice_aleatorio_dois;
    unsigned int vertices_que_faltam, grupo_selecionado, arestas_corte = 0;
    std::vector<std::vector<unsigned int> > vertices;
    std::vector<unsigned int> A;
    std::vector<unsigned int> B;
    std::vector<int> m;
    std::vector<unsigned int> vertices_escolhidos;
    std::vector<unsigned int> candidatos;
    std::vector<unsigned int>::iterator it_ja_escolhido;
    std::vector<unsigned int>::iterator it_a;
    std::vector<unsigned int>::iterator it_b;
    std::vector<unsigned int>::iterator it_a_vizinhos;
    std::vector<unsigned int>::iterator it_b_vizinhos;
    int diferenca = 0, menor_de_todos;
    unsigned int alpha = 1, aleatorio;

    arquivo = fopen("add20.graph", "r");

    if (!arquivo)
    {
        printf ("Erro na abertura do arquivo.");
        return 0;
    }
    else
    {
        fgets(linha, sizeof(linha), arquivo);
        pch = strtok(linha, " ");
        std::cout << "Numero de vertices: " << pch << "\n";
        numero_vertices = atoi (pch); //Numero de vertices no grafo
        pch = strtok(NULL, " ");
        std::cout << "Numero de arestas: " << pch;
        numero_arestas = atoi (pch); //Numero de arestas no grafo
        for (i = 0; i < numero_vertices; i++) //Para cada vertice v
        {
            //std::cout << "\nOs vizinhos de " << i+1 << " sao: ";
            std::vector<unsigned int>temp;
            fgets(linha, sizeof(linha), arquivo);
            pch = strtok(linha, " ");
            inteiro = atoi(pch);
            temp.push_back(inteiro);
            //std::cout << inteiro << " ";
            //Sleep(100);
            while (pch != NULL) //Indique os vizinhos do vertice v.
            {
                pch = strtok(NULL, " ");
                inteiro = atoi (pch);

                //Sleep(100);
                if (inteiro != 0)
                {
                    //std::cout << inteiro << " ";
                    temp.push_back(inteiro);
                }
            }
            vertices.push_back(temp);
            temp.clear();
        }
    }
    fclose(arquivo);

    srand(time(NULL));

    do
    {
        vertice_aleatorio_um = rand() % numero_vertices; //Gera um numero aleatorio entre 0 e |V|-1
        vertice_aleatorio_dois = rand() % numero_vertices; //Gera um numero aleatorio entre 0 e |V|-1
    }
    while (vertice_aleatorio_um == vertice_aleatorio_dois);   //vertices u e v devem ser distintos.

    i = 0;
    A.push_back(vertice_aleatorio_um); //A <- u
    B.push_back(vertice_aleatorio_dois); //B <- v
    m.resize(numero_vertices);
    vertices_escolhidos.resize(numero_vertices);
    m[vertice_aleatorio_um] = 0; //Valor de m para os vertices iniciais sao zero.
    m[vertice_aleatorio_dois] = 0; //Valor de m para os vertices iniciais sao zero.
    std::cout << "vertice aleatorio um: " << vertice_aleatorio_um << "\n";
    std::cout << "vertice aleatorio dois: " << vertice_aleatorio_dois << "\n";
    grupo_selecionado = 0;
    vertices_que_faltam = numero_vertices - 2;

    while (vertices_que_faltam > 0) //Para todos os vertices
    {
        grupo_selecionado = 1 - grupo_selecionado;
        for (i = 0; i < vertices.size(); i++) //Calcular a diferença de vertices entre A e B
        {
            diferenca = 0;
            for (j = 0; j < vertices[i].size(); j++) //Para todos os vizinhos do vertice, faça a diferença de vertices entre A e B
            {
                it_a = std::find(A.begin(), A.end(), vertices[i][j]); //Procure o vertice entre o subgrafo A
                it_b = std::find(B.begin(), B.end(), vertices[i][j]); //Procure o vertice entre o subgrafo B

                if (grupo_selecionado == 1) //Se o grupo que esta sendo selecionado for A
                {
                    if (it_a != A.end()) //Se o vizinho esta em A
                        diferenca--;
                    else if (it_b != B.end()) //Se o vizinho esta em B
                        diferenca++;
                }
                else //Se o grupo que esta sendo selecionado for B
                {
                    if (it_b != B.end()) //Se o vizinho esta em B
                        diferenca--;
                    else if (it_a != A.end()) //Se o vizinho esta em A
                        diferenca++;
                }
            }
            m.push_back(diferenca);
        }
        
        menor_de_todos = *std::min_element(m.begin(),m.end()); //Pega o menor valor da diferenca encontrada
        for (k = 0; k < m.size(); k++)
        {
            //std::cout << "Forma RCL.\n";
            //Forma RCL
            if (m[k] <= menor_de_todos + (menor_de_todos * alpha) && m[k] >= menor_de_todos)
            {
                candidatos.push_back(k);
            }
        }
        /** APENAS PARA TESTE! **/
        std::cout << "candidatos size " << candidatos.size() << "\n";
        Sleep(1000);
        candidatos.erase( std::remove( candidatos.begin(), candidatos.end(), 0 ), candidatos.end() ); //Retirar os zeros.
        // Remover todos os elementos que já fazem parte de A
        for (k = 0; k < A.size(); k++)
        {
            std::cout << "Removendo " << A[k] << "...\n";
            candidatos.erase( std::remove( candidatos.begin(), candidatos.end(), A[k] ), candidatos.end() );
            Sleep(200);
        }
        // Remover todos os elementos que já fazem parte de B
        for (k = 0; k < B.size(); k++)
        {
            std::cout << "Removendo " << B[k] << "...\n";
            candidatos.erase( std::remove( candidatos.begin(), candidatos.end(), B[k] ), candidatos.end() );
            Sleep(200);
        }
        
        aleatorio = rand() % candidatos.size(); //Pegar um aleatorio entre a lista de candidatos.
        std::cout << "Chegou aqui." << "\n";
        if (grupo_selecionado == 1) //Se o subgrafo que vai receber o proximo vertice for A
            A.push_back(candidatos[aleatorio]);
        else //Se o subgrafo que vai receber o proximo vertice for B
            B.push_back(candidatos[aleatorio]);

        vertices_que_faltam--;
        std::cout << "Vertices que faltam " << vertices_que_faltam << "\n";
        candidatos.clear(); //Destrói a RCL desta iteração
        m.clear(); //Destroi a lista que contém a diferença entre os subgrafos
        vertices_escolhidos.clear(); //Destroi a lista que contém o indice dos vertices da diferença entre os subgrafos
    }
    for (i = 0; i < vertices.size(); i++)
    {
        it_a = std::find(A.begin(), A.end(), i+1); //Procure o vertice entre o subgrafo A
        it_b = std::find(B.begin(), B.end(), i+1); //Procure o vertice entre o subgrafo B
        for (j = 0; j < vertices[i].size(); j++)
        {
            if (it_a != A.end()) //Se o vertice faz parte do subgrafo A
            {
                for (k = 0; k < vertices[i].size(); k++)
                {
                    it_a_vizinhos = std::find(A.begin(), A.end(), vertices[i][k]); //Procure os vizinhos entre o subgrafo A
                    if (it_a_vizinhos == A.end()) //Se o vertice pertence ao subgrafo A e o vizinho nao esta em A
                        arestas_corte++;
                }
            }
            else if (it_b != B.end()) //Se o vertice faz parte do subgrafo A
            {
                for (k = 0; k < vertices[i].size(); k++)
                {
                    it_b_vizinhos = std::find(B.begin(), B.end(), vertices[i][k]); //Procure os vizinhos entre o subgrafo A
                    if (it_a_vizinhos == B.end()) //Se o vertice pertence ao subgrafo A e o vizinho nao esta em A
                        arestas_corte++;
                }
            }
        }

    }
    std::cout << "O numero de aresta do corte e " << arestas_corte;
    return 0;
}

//pch = strtok(NULL, " ");
//std::cout << "   " << pch;


//vertices.push_back(0);

//std::cout << "Vetor: ";
//std::cout << vertices[0] << " ";


