#include <iostream>
#include <vector>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <unistd.h>
#include <windows.h>
#include <time.h>
#include <algorithm>

int main()
{
    FILE *arquivo;
    char linha[1000], *pch;
    unsigned int i, j, k, numero_vertices, numero_arestas, inteiro, vertice_aleatorio_um, vertice_aleatorio_dois;
    unsigned int vertices_que_faltam, grupo_selecionado, arestas_corte = 0;
    std::vector<std::vector<unsigned int> > vertices;
    std::vector<unsigned int> A;
    std::vector<unsigned int> B;
    std::vector<int> m;
    std::vector<unsigned int> vertices_escolhidos;
    std::vector<unsigned int> candidatos;
    std::vector<unsigned int>::iterator it_ja_escolhido;
    std::vector<unsigned int>::iterator it_a;
    std::vector<unsigned int>::iterator it_b;
    std::vector<unsigned int>::iterator it_a_vizinhos;
    std::vector<unsigned int>::iterator it_b_vizinhos;
    int diferenca = 0, menor_de_todos;
    char nome_arquivo[20];
    unsigned int alpha = 0.05, aleatorio;
    int arestas_no_subgrafo_complementar, arestas_no_subgrafo;
    double tempo;
    time_t t_inicio, t_fim;
    int tecla;

    std::cout << "Digite o nome do arquivo de entrada (.graph): ";
    //std::cin >> nome_arquivo;
    std::cout << "Digite o valor de alfa (entre 0 e 1): " << "\n";
    //std::cin >> alpha;
    //while (alpha > 1 || alpha < 0)
    //{
    //std::cout >> "Valor invalido. Digite um numero entre 0 e 1: "
    //std::cin >> alpha;
    //}

    t_inicio = time(NULL);
    arquivo = fopen("add20.graph", "r");

    if (!arquivo)
    {
        printf ("Erro na abertura do arquivo.");
        return 0;
    }
    else
    {
        fgets(linha, sizeof(linha), arquivo);
        pch = strtok(linha, " ");
        std::cout << "Numero de vertices: " << pch << "\n";
        numero_vertices = atoi (pch); //Numero de vertices no grafo
        pch = strtok(NULL, " ");
        std::cout << "Numero de arestas: " << pch;
        numero_arestas = atoi (pch); //Numero de arestas no grafo
        std::cout << "Gerando grafo...\n";
        for (i = 0; i < numero_vertices; i++) //Para cada vertice v
        {
            //std:: cout << "\n";
            //std::cin >> tecla;
            //std::cout << "Vertice " << i+1 << " tem vizinhos: ";
            std::vector<unsigned int>temp;
            fgets(linha, sizeof(linha), arquivo);
            pch = strtok(linha, " ");
            inteiro = atoi(pch);
            temp.push_back(inteiro);
            //std::cout << inteiro << " ";
            Sleep(200);
            while (pch != NULL) //Indique os vizinhos do vertice v.
            {
                pch = strtok(NULL, " ");
                inteiro = atoi (pch);
                if (inteiro != 0)
                {
                    temp.push_back(inteiro);
                    //std::cout << inteiro << " ";
                    //Sleep(200);
                }
            }
            vertices.push_back(temp);
            temp.clear();
        }
    }
    std::cout << "Terminou de gerar o grafo.\n";
    fclose(arquivo);

    srand(time(NULL));
    std::cout << "Gerando solucao inicial...\n";
    do
    {
        vertice_aleatorio_um = rand() % numero_vertices; //Gera um numero aleatorio entre 0 e |V|-1
        vertice_aleatorio_dois = rand() % numero_vertices; //Gera um numero aleatorio entre 0 e |V|-1
    }
    while (vertice_aleatorio_um == vertice_aleatorio_dois);   //vertices u e v devem ser distintos.

    A.push_back(vertice_aleatorio_um); //A <- u
    B.push_back(vertice_aleatorio_dois); //B <- v
    grupo_selecionado = 0;
    vertices_que_faltam = numero_vertices - 2;

    while (vertices_que_faltam > 0) //Para todos os vertices
    {
        grupo_selecionado = 1 - grupo_selecionado;
        for (i = 0; i < vertices.size(); i++) //Calcular a diferença de vertices entre A e B
        {
            diferenca = 0;
            for (j = 0; j < vertices[i].size(); j++) //Para todos os vizinhos do vertice, faça a diferença de vertices entre A e B
            {
                it_a = std::find(A.begin(), A.end(), vertices[i][j]); //Procure o vertice entre o subgrafo A
                it_b = std::find(B.begin(), B.end(), vertices[i][j]); //Procure o vertice entre o subgrafo B

                if (grupo_selecionado == 1) //Se o grupo que esta sendo selecionado for A
                {
                    if (it_a != A.end()) //Se o vizinho esta em A
                        diferenca--;
                    else if (it_b != B.end()) //Se o vizinho esta em B
                        diferenca++;
                }
                else //Se o grupo que esta sendo selecionado for B
                {
                    if (it_b != B.end()) //Se o vizinho esta em B
                        diferenca--;
                    else if (it_a != A.end()) //Se o vizinho esta em A
                        diferenca++;
                }
            }
            m.push_back(diferenca);
        }

        menor_de_todos = *std::min_element(m.begin(),m.end()); //Pega o menor valor da diferenca encontrada
        for (k = 0; k < m.size(); k++)
        {
            //Forma RCL
            if (m[k] <= menor_de_todos + (menor_de_todos * alpha) && m[k] >= menor_de_todos)
                candidatos.push_back(k);
        }

        // Remover todos os elementos que já fazem parte de A
        for (k = 0; k < A.size(); k++)
            candidatos.erase( std::remove( candidatos.begin(), candidatos.end(), A[k] ), candidatos.end() );

        // Remover todos os elementos que já fazem parte de B
        for (k = 0; k < B.size(); k++)
            candidatos.erase( std::remove( candidatos.begin(), candidatos.end(), B[k] ), candidatos.end() );

        srand(time(NULL));
        if (candidatos.size() == 0)
        {
            //std::cout << "ZERO!\n";
            break;
        }
        aleatorio = rand() % candidatos.size(); //Pegar um aleatorio entre a lista de candidatos.

        if (grupo_selecionado == 1) //Se o subgrafo que vai receber o proximo vertice for A
            A.push_back(candidatos[aleatorio]);
        else //Se o subgrafo que vai receber o proximo vertice for B
            B.push_back(candidatos[aleatorio]);

        vertices_que_faltam--;
        candidatos.clear(); //Destrói a RCL desta iteração
        m.clear(); //Destroi a lista que contém a diferença entre os subgrafos
    }
    //Conta o numero de arestas do corte
    for (i = 0; i < vertices.size(); i++)
    {
        it_a = std::find(A.begin(), A.end(), i); //Procure o vertice entre o subgrafo A
        it_b = std::find(B.begin(), B.end(), i); //Procure o vertice entre o subgrafo B
        if (it_a != A.end()) //Se o vertice faz parte do subgrafo A
        {
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_a_vizinhos = std::find(A.begin(), A.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo A
                if (it_a_vizinhos == A.end()) //Se o vertice pertence ao subgrafo A e o vizinho nao esta em A
                    arestas_corte++;
            }

        }
        else if (it_b != B.end()) //Se o vertice faz parte do subgrafo B
        {
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_b_vizinhos = std::find(B.begin(), B.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo B
                if (it_b_vizinhos == B.end()) //Se o vertice pertence ao subgrafo B e o vizinho nao esta em B
                    arestas_corte++;
            }
        }
    }
    arestas_corte = arestas_corte/2;
    std::cout << "Solucao inicial (SI): \n";
    std::cout << "O numero de arestas do corte e " << arestas_corte;
    std::cout << "\nFaltaram " << vertices_que_faltam << "vertices\n";

    arquivo = fopen("teste.txt", "w");
    fprintf (arquivo, "A :=\n");
    for (i = 0; i < A.size(); i++)
        fprintf (arquivo, "%u\n", A[i]+1);
    for (i = 0; i < 50; i++)
        fprintf (arquivo, "*");
    fprintf (arquivo, "\n");
    fprintf (arquivo, "B :=\n");
    for (j = 0; j < B.size(); j++)
        fprintf (arquivo, "%u\n", B[j]+1);

    fclose(arquivo);

    //Busca local
    for (i = 0; i < vertices.size()/2; i++)
    {
        it_a = std::find(A.begin(), A.end(), i); //Procure o vertice entre o subgrafo A
        it_b = std::find(B.begin(), B.end(), i); //Procure o vertice entre o subgrafo B
        arestas_no_subgrafo = 0;
        arestas_no_subgrafo_complementar = 0;
        if (grupo_selecionado == 1 && it_b != B.end()) //Se o proximo subgrafo que vai receber o vertice for A,
        {
            //O vertice i selecionado tem que pertencer a B.
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_b_vizinhos = std::find(B.begin(), B.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo B
                if (it_b_vizinhos != B.end()) //Se o vertice pertence ao subgrafo B e o vizinho esta em B
                    arestas_no_subgrafo++;
                else if (it_b_vizinhos == B.end()) //Se o vertice pertence ao subgrafo B e o vizinho esta em A
                    arestas_no_subgrafo_complementar++;
            }
            if (arestas_no_subgrafo - arestas_no_subgrafo_complementar < 0)
            {
                //A recebe o vertice i
                A.push_back(i);
                //B perde o vertice i
                B.erase( std::remove( B.begin(), B.end(), i ), B.end() );
                //Proximo subgrafo que vai receber o vertice sera B
                grupo_selecionado = 1 - grupo_selecionado;
            }
        }
        else if (grupo_selecionado == 0 && it_a != A.end()) //Se o proximo subgrafo que vai receber o vertice for B,
        {
            //O vertice i selecionado tem que pertencer a A.
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_a_vizinhos = std::find(A.begin(), A.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo A
                if (it_a_vizinhos != A.end()) //Se o vertice pertence ao subgrafo A e o vizinho esta em A
                    arestas_no_subgrafo++;
                else if (it_a_vizinhos == A.end()) //Se o vertice pertence ao subgrafo A e o vizinho esta em B
                    arestas_no_subgrafo_complementar++;
            }

            if (arestas_no_subgrafo - arestas_no_subgrafo_complementar < 0)
            {
                //B recebe o vertice i
                B.push_back(i);
                //A perde o vertice i
                A.erase( std::remove( A.begin(), A.end(), i ), A.end() );
                //Proximo subgrafo que vai receber o vertice sera A
                grupo_selecionado = 1 - grupo_selecionado;
            }
        }
    }

    arestas_corte = 0;
    //Conta o numero de arestas do corte novamente
    for (i = 0; i < vertices.size(); i++)
    {
        it_a = std::find(A.begin(), A.end(), i); //Procure o vertice entre o subgrafo A
        it_b = std::find(B.begin(), B.end(), i); //Procure o vertice entre o subgrafo B
        if (it_a != A.end()) //Se o vertice faz parte do subgrafo A
        {
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_a_vizinhos = std::find(A.begin(), A.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo A
                if (it_a_vizinhos == A.end()) //Se o vertice pertence ao subgrafo A e o vizinho nao esta em A
                    arestas_corte++;
            }

        }
        else if (it_b != B.end()) //Se o vertice faz parte do subgrafo B
        {
            for (j = 0; j < vertices[i].size(); j++)
            {
                it_b_vizinhos = std::find(B.begin(), B.end(), vertices[i][j]); //Procure os vizinhos entre o subgrafo B
                if (it_b_vizinhos == B.end()) //Se o vertice pertence ao subgrafo B e o vizinho nao esta em B
                    arestas_corte++;
            }
        }
    }
    arestas_corte = arestas_corte/2;
    std::cout << "Solucao final (SF): \n";
    std::cout << "O numero de arestas do corte e " << arestas_corte;
    t_fim = time(NULL);
    tempo = difftime(t_fim, t_inicio);
    std::cout << "\nO programa levou " << tempo << " segundos para executar.\n";
    return 0;
}
